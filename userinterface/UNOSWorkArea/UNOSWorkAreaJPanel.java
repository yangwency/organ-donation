/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.UNOSWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import java.awt.CardLayout;
import javax.swing.JPanel;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.Color;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import userinterface.SystemAdminWorkArea.ManageNetworkJPanel;

/**
 *
 * @author Áèç
 */
public class UNOSWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
    UserAccount useraccount;
    int kidneyCount;
    int liverCount;
    int pancreasCount;
    int lungCount;
    int intestineCount;
    int heartCount;
    
    int kidney2015Count;
    int liver2015Count;
    int pancreas2015Count;
    int lung2015Count;
    int intestine2015Count;
    int heart2015Count;
    
    int kidney2016Count;
    int liver2016Count;
    int pancreas2016Count;
    int lung2016Count;
    int intestine2016Count;
    int heart2016Count;
    
    int kidney2017Count;
    int liver2017Count;
    int pancreas2017Count;
    int lung2017Count;
    int intestine2017Count;
    int heart2017Count;
    
    int kidney2018Count;
    int liver2018Count;
    int pancreas2018Count;
    int lung2018Count;
    int intestine2018Count;
    int heart2018Count;
    
    /**
     * Creates new form UNOSWorkAreaJPanel
     */
    public UNOSWorkAreaJPanel(JPanel userProcessContainer, EcoSystem system, UserAccount useraccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.useraccount = useraccount;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(242, 240, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel2.setText("My Work Area ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, -1, -1));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 40, 1080));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 1040, 30));

        jPanel4.setBackground(new java.awt.Color(7, 79, 80));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jButton1.setText("Manage Organ Request List");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 140, 210, -1));

        jButton2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jButton2.setText("View Organ Donor List");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 200, 210, -1));

        jButton3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jButton3.setText("Start Hospital Server");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 210, -1));

        jButton4.setText("Organ Transplant Histogram");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 270, 210, -1));

        jButton5.setText("Tranplant Progress (years)");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 330, 210, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 1040, 940));

        jLabel3.setText("UNOS Role");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 200, 20));

        jLabel17.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-charity.png"))); // NOI18N
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, -1, -1));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 1080));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        OrganRequestJPanel OrganRequestJPanel = new OrganRequestJPanel(userProcessContainer, system, useraccount);
        userProcessContainer.add("OrganRequestJPanel", OrganRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        ViewOrganDonorJPanel ViewOrganDonorJPanel = new ViewOrganDonorJPanel(userProcessContainer, system);
        userProcessContainer.add("ViewOrganDonorJPanel", ViewOrganDonorJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        new ServerGUI(7000);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount useraccount : enterprise.getUserAccountDirectory().getUserAccountList()) {

                    if (useraccount.getRole().toString() == "Business.Role.AdminRole") {

                        for (WorkRequest request : useraccount.getWorkQueue().getOrganRequestList()) {
                            
                            Object[] row = new Object[4];
                            row[0] = request;
                            row[1] = request.getMessage();
                            row[2] = request.getSender().getEmployee().getName();
                            row[3] = request.getStatus();
                            
                            System.out.println("bar request"+request);

                            if (row[3].toString().equals("finished")) {
                                if (row[0].toString().equals("KIDNEY")) {

                                    kidneyCount++;
                                    System.out.println("kidney" + kidneyCount);
                                }

                                if (row[0].toString().equals("HEART")) {
                                    heartCount++;
                                }
                                if (row[0].toString().equals("LIVER")) {
                                    liverCount++;
                                }
                                if (row[0].toString().equals("LUNG")) {
                                    lungCount++;
                                }
                                if (row[0].toString().equals("PANCREAS")) {
                                    pancreasCount++;
                                }
                                if (row[0].toString().equals("INTESTINE")) {
                                    intestineCount++;
                                }

                            }

                        }
                    }
                }

//                
            }
        }

        DefaultCategoryDataset barChartData = new DefaultCategoryDataset();
        barChartData.setValue(kidneyCount, "kidney", "kidney");
        barChartData.setValue(heartCount, "heart", "heart");
        barChartData.setValue(liverCount, "liver", "liver");
        barChartData.setValue(lungCount, "lung", "lung");
        barChartData.setValue(pancreasCount, "pancreas", "pancreas");
        barChartData.setValue(intestineCount, "intestine", "intestine");

        double d = 0.8;

        JFreeChart jchart = ChartFactory.createBarChart3D("Statistical Data", "organs", "Number of Organ donors", barChartData, PlotOrientation.VERTICAL, true, true, true);

        CategoryPlot plot = jchart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.black);
        plot.getRangeAxis().setLowerBound(d);
        ChartFrame chartFrm = new ChartFrame("Organ Donors", jchart, true);
        chartFrm.setVisible(true);
        chartFrm.setSize(500, 400);


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount useraccount : enterprise.getUserAccountDirectory().getUserAccountList()) {

                    if (useraccount.getRole().toString() == "Business.Role.AdminRole") {

                        for (WorkRequest request : useraccount.getWorkQueue().getOrganRequestList()) {
                            
                            Object[] row = new Object[5];
                            row[0] = request;
                            row[1] = request.getMessage();
                            row[2] = request.getSender().getEmployee().getName();
                            row[3] = request.getStatus();
                            row[4] =request.getCompletedDate();
                            
                            System.out.println("bar request"+request);

                            if (row[3].toString().equals("finished") ) {
                                if (row[0].toString().equals("KIDNEY") && row[4].toString().equals("2015")) {

                                    kidney2015Count++;
                                    System.out.println("kidney" + kidneyCount);
                                }
                                
                                if (row[0].toString().equals("KIDNEY") && row[4].toString().equals("2016")) {

                                    kidney2016Count++;
                                    System.out.println("kidney" + kidneyCount);
                                }
                                
                                if (row[0].toString().equals("KIDNEY") && row[4].toString().equals("2017")) {

                                    kidney2017Count++;
                                    System.out.println("kidney" + kidneyCount);
                                }
                                
                                if (row[0].toString().equals("KIDNEY") && row[4].toString().equals("2018")) {

                                    kidney2018Count++;
                                    
                                }
                                

                                if (row[0].toString().equals("HEART") && row[4].toString().equals("2015")) {
                                    heart2015Count++;
                                }
                                
                                if (row[0].toString().equals("HEART") && row[4].toString().equals("2016")) {
                                    heart2016Count++;
                                }
                                
                                if (row[0].toString().equals("HEART") && row[4].toString().equals("2017")) {
                                    heart2017Count++;
                                }
                                
                                if (row[0].toString().equals("HEART") && row[4].toString().equals("2018")) {
                                    heart2018Count++;
                                }
                                
                                
                                if (row[0].toString().equals("LIVER") && row[4].toString().equals("2015") ) {
                                    liver2015Count++;
                                }
                                if (row[0].toString().equals("LIVER") && row[4].toString().equals("2016") ) {
                                    liver2016Count++;
                                }
                                if (row[0].toString().equals("LIVER") && row[4].toString().equals("2017") ) {
                                    liver2017Count++;
                                }
                                if (row[0].toString().equals("LIVER") && row[4].toString().equals("2018") ) {
                                    liver2018Count++;
                                }
                                
                                if (row[0].toString().equals("LUNG") && row[4].toString().equals("2015") ) {
                                    lung2015Count++;
                                }
                                if (row[0].toString().equals("LUNG") && row[4].toString().equals("2016") ) {
                                    lung2016Count++;
                                }
                                if (row[0].toString().equals("LUNG") && row[4].toString().equals("2017") ) {
                                    lung2017Count++;
                                }
                                if (row[0].toString().equals("LUNG") && row[4].toString().equals("2018")) {
                                    lung2018Count++;
                                }
                                
                                if (row[0].toString().equals("PANCREAS") && row[4].toString().equals("2015")) {
                                    pancreas2015Count++;
                                }
                                if (row[0].toString().equals("PANCREAS") && row[4].toString().equals("2016")) {
                                    pancreas2016Count++;
                                }
                                
                                if (row[0].toString().equals("PANCREAS") && row[4].toString().equals("2017")) {
                                    pancreas2017Count++;
                                }
                                if (row[0].toString().equals("PANCREAS") && row[4].toString().equals("2018")) {
                                    pancreas2018Count++;
                                }
                                
                                if (row[0].toString().equals("INTESTINE") && row[4].toString().equals("2015")) {
                                    intestine2015Count++;
                                }
                                
                                if (row[0].toString().equals("INTESTINE") && row[4].toString().equals("2016")) {
                                    intestine2016Count++;
                                }
                                
                                if (row[0].toString().equals("INTESTINE") && row[4].toString().equals("2017")) {
                                    intestine2017Count++;
                                }
                                
                                if (row[0].toString().equals("INTESTINE") && row[4].toString().equals("2018")) {
                                    intestine2018Count++;
                                }
                                 
                                
                            }

                        }
                    }
                }

//                
            }
        }

        DefaultCategoryDataset barChartData = new DefaultCategoryDataset();
        barChartData.setValue(kidney2015Count, "kidney", "2015");
        barChartData.setValue(kidney2016Count, "kidney", "2016");
        barChartData.setValue(kidney2017Count, "kidney", "2017");
        barChartData.setValue(kidney2018Count, "kidney", "2018");
        
        
        barChartData.setValue(heart2015Count, "heart", "2015");
        barChartData.setValue(heart2016Count, "heart", "2016");
        barChartData.setValue(heart2017Count, "heart", "2017");
        barChartData.setValue(heart2018Count, "heart", "2018");
        
        barChartData.setValue(liver2015Count, "liver", "2015");
        barChartData.setValue(liver2016Count, "liver", "2016");
        barChartData.setValue(liver2017Count, "liver", "2017");
        barChartData.setValue(liver2018Count, "liver", "2018");
        
        
        barChartData.setValue(lung2015Count, "lung", "2015");
        barChartData.setValue(lung2016Count, "lung", "2016");
        barChartData.setValue(lung2017Count, "lung", "2017");
        barChartData.setValue(lung2018Count, "lung", "2018");
        
        
        barChartData.setValue(pancreas2015Count, "pancreas", "2015");
         barChartData.setValue(pancreas2016Count, "pancreas", "2016");
          barChartData.setValue(pancreas2017Count, "pancreas", "2017");
           barChartData.setValue(pancreas2018Count, "pancreas", "2018");
          
        
        barChartData.setValue(intestine2015Count, "intestine", "2015");
        barChartData.setValue(intestine2016Count, "intestine", "2016");
        barChartData.setValue(intestine2017Count, "intestine", "2017");
        barChartData.setValue(intestine2018Count, "intestine", "2018");
        
        
        double d = 0.8;

        JFreeChart jchart = ChartFactory.createBarChart3D("Statistical Data", "Years", "Number of Organ donors", barChartData, PlotOrientation.VERTICAL, true, true, true);

        CategoryPlot plot = jchart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.black);
        plot.getRangeAxis().setLowerBound(d);
        ChartFrame chartFrm = new ChartFrame("Organ Donors", jchart, true);
        chartFrm.setVisible(true);
        chartFrm.setSize(500, 400);

        
        
        
        
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton5ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
