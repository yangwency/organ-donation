/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AirAmbulenceRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.DirtributionWorkRequest;
import Business.WorkQueue.OrganReportHosToUNOS;
import Business.WorkQueue.OrganReportDocToHos;
import Business.WorkQueue.OrganRequestDocToHos;
import Business.WorkQueue.OrganRequestHosToUNOS;
import Business.WorkQueue.WorkRequest;
import Business.WorkQueue.ArtificialOrganRequest;
import Business.WorkQueue.DirtributionWorkRequest;
import java.awt.CardLayout;
import Business.Organization.DoctorOrganization;

/**
 *
 * @author wency
 */
public class AirAmbulenceWorkAreaJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    EcoSystem system;
    UserAccount account;
    DoctorOrganization doctororganization;

    /**
     * Creates new form AirAmbulenceWorkAreaJPanel
     */
    public AirAmbulenceWorkAreaJPanel(JPanel userProcessContainer, EcoSystem system, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.account = account;
        populate();
    }

    public void populate() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        WorkQueue workqueue = system.getWorkQueue();

        for (WorkRequest request : workqueue.getDistributionList()) {

            DirtributionWorkRequest distributionrequest = (DirtributionWorkRequest) request;

            Object[] row = new Object[4];
            row[0] = distributionrequest;
            row[1] = distributionrequest.getFrom();
            row[2] = distributionrequest.getTo();
            row[3] = distributionrequest.getStatus();
            model.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        refresh = new javax.swing.JButton();
        process = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(242, 240, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel2.setText("My Work Area ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, -1, -1));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 40, 810));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 1040, 30));

        jPanel4.setBackground(new java.awt.Color(7, 79, 80));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Organ Name", "From", "To", "Status"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 770, 430));

        refresh.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        jPanel4.add(refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 490, 90, -1));

        process.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        process.setText("Process");
        process.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processActionPerformed(evt);
            }
        });
        jPanel4.add(process, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 490, -1, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 1040, 670));

        jLabel3.setText("AirAmbulance Role");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 200, 20));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-airplane_mode_on.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 100, 80));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1076, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        populate();
    }//GEN-LAST:event_refreshActionPerformed

    private void processActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }
        WorkQueue workqueue = system.getWorkQueue();
        DirtributionWorkRequest request = (DirtributionWorkRequest) jTable1.getValueAt(selectedRow, 0);
       
        request.setStatus("Air Ambulence Processing");
        String id = request.getMessage();
        String name = request.getOrganname();
        System.out.println("nilia?"+request.getOrgan());

        OrganRequestDocToHos ordh = new OrganRequestDocToHos();
        OrganRequestHosToUNOS htu = new OrganRequestHosToUNOS();
        OrganReportHosToUNOS hs = new OrganReportHosToUNOS();
        OrganReportDocToHos oreport = new OrganReportDocToHos();
        ArtificialOrganRequest a = new ArtificialOrganRequest();

        for (Network network : system.getNetworkList()) {

            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {

                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {

                    if (organization.getWorkQueue().searchArtificial(id, name) == null) {
                        System.out.println("bos?"+organization.getWorkQueue().getOrganRequestList());
                      

                        if (organization.getWorkQueue().search(id, name) != null) {
                            WorkRequest wr = organization.getWorkQueue().search(id, name);
                            System.out.println("em" + wr);
                            
                            OrganRequestDocToHos requ = (OrganRequestDocToHos) wr;
                            requ.setStatus("AirAmbulence Processing");
                           
                            ordh = requ;
                          
                        }
                    }
                }
            }
        }

        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount useraccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                    if (useraccount.getRole().toString() == "Business.Role.AdminRole") {
                        if (useraccount.getWorkQueue().search(id, name) != null) {

                            WorkRequest w = useraccount.getWorkQueue().search(id, name);
                            htu = (OrganRequestHosToUNOS) w;
                            htu.setStatus("AirAmbulence Processing");
                        }
                    }

                }
            }
        }

        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount useraccount : enterprise.getUserAccountDirectory().getUserAccountList()) {

                    if (useraccount.getRole().toString() == "Business.Role.AdminRole") {

                        if (useraccount.getWorkQueue().getOrganReportList().size() != 0) {

                            System.out.println("BOB" + useraccount.getWorkQueue());
                            if (useraccount.getWorkQueue().searchReport(name) != null) {
                                System.out.println("keven" + useraccount.getWorkQueue().searchReport(name));
                                WorkRequest w = useraccount.getWorkQueue().searchReport(name);
                                OrganReportHosToUNOS hahaha = (OrganReportHosToUNOS) w;

                                hahaha.setStatus("AirAmbulence Processing");
                                hs = hahaha;
                            }
                        }
                    }
                }

            }
        }
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount useraccount : enterprise.getUserAccountDirectory().getUserAccountList()) {

                    if (useraccount.getRole().toString() == "Business.Role.AdminRole") {
                        if (useraccount.getWorkQueue().searchArtificial(id, name) != null) {
                            //System.out.println("keven" + useraccount.getWorkQueue().searchReport(me));
                            WorkRequest w = useraccount.getWorkQueue().searchArtificial(id, name);
                            ArtificialOrganRequest haha = (ArtificialOrganRequest) w;
                            //hs.setStatus("AirAmbulence Processing");
                            haha.setStatus("AirAmbulence Processing");
                            a = haha;
                        }
                    }
                }

            }
        }

        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof DoctorOrganization) {
                        doctororganization = (DoctorOrganization) organization;
                        //System.out.println("doctor?" + doctororganization.getWorkQueue().getOrganReportList());
                        if (doctororganization.getWorkQueue().getOrganReportList().size() != 0) {
                            
                            if(doctororganization.getWorkQueue().searchDocReport(name, id)!= null){
                           
                                System.out.println("herehere?");
                                WorkRequest wor = doctororganization.getWorkQueue().searchReport(name);
                                OrganReportDocToHos sd = (OrganReportDocToHos) wor;

                                sd.setStatus("AirAmbulence Processing");
                                oreport = sd;
                                System.out.println("oreport" + oreport);
                            
                            }
                        }
                    }
                }

            }
        }

        DirtributionWorkRequest dis = new DirtributionWorkRequest();
        if (workqueue.searchDistribution(id, name) != null) {
            WorkRequest wr = workqueue.searchDistribution(id, name);
            //System.out.println("!!"+wr);
            dis = (DirtributionWorkRequest) wr;
            dis.setStatus("AirAmbulence Processing");
            //OrganRequestDocToHos requ = (OrganRequestDocToHos) wr;
        }

        userinterface.AirAmbulenceRole.ProcessJPanel ProcessJPanel = new userinterface.AirAmbulenceRole.ProcessJPanel(userProcessContainer, request, ordh, dis, htu, oreport, hs, a);
        userProcessContainer.add("ProcessJPanel", ProcessJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_processActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton process;
    private javax.swing.JButton refresh;
    // End of variables declaration//GEN-END:variables
}
